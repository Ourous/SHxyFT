use System.Drawing
use System.Windows.Forms
use System.Threading
use System.ComponentModel

class Program
	"""
	Program
	"""
	#TODO add better description

	event PreviewRefresh as PreviewRefreshHandler is shared
	sig PreviewRefreshHandler(img as Bitmap)

	shared

		get renderThread from __renderThread as BackgroundWorker _
		= BackgroundWorker(workerSupportsCancellation=true,workerReportsProgress=true)

		var __sourceImage as Bitmap?

		pro saved from __saved = true

		pro sourceImage as Bitmap

			get

				return __sourceImage to !


			set
	
				__sourceImage = value
				__history = [value]
				__historyIndex = 0

				raise .PreviewRefresh, .currentImage


		get currentImage as Bitmap

			return Bitmap(__history[__historyIndex])


		#handles undo/redo operations behind the scenes
		#TODO save history in a more memory-friendly way
		var __history as List<of Bitmap>?
		var __historyIndex as int

		def undo

			if __historyIndex > 0

				__saved = false

				__historyIndex -= 1

				raise .PreviewRefresh, .currentImage


		def redo

			if __historyIndex < __history.count-1

				__saved = false

				__historyIndex += 1

				raise .PreviewRefresh, .currentImage


		def main has STAThread

			listen __renderThread.doWork, ref Renderer.renderOnBackgroundWorker

			listen __renderThread.runWorkerCompleted, do(sender, e as RunWorkerCompletedEventArgs)

				try

					img = e.result to Bitmap


				catch InvalidOperationException

					pass


				catch ex as Exception
					
					throw ex


				success

					__saved = false

					__history = __history[:__historyIndex+=1]+[img]

					raise .PreviewRefresh, img


			try

				Application.enableVisualStyles
				Application.run(Window())


			catch ex as Exception

				throw ex