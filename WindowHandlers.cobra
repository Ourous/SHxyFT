use System.Windows.Forms
use System.Text.RegularExpressions
use System.Drawing
use System.ComponentModel

class Window is partial

	def __setupControlHandlers
		"""
		Set the handler methods for the controls in the Window
		"""
		# TODO
		# * redo the verfification for the input boxes
		# * - possibly have them display labels when empty
		# * - make invalid input handling more unintrusive for the user 

		# universal save prompt
		listen __SavePrompt, do

			saveDialog = SaveFileDialog(
				defaultExt='png',
				addExtension=true,
				filter='Portable Network Graphics (*.png)|.png|JPEG (*.jpg;*.jpeg)|.jpg|Bitmap Image (*.bmp)|.bmp'
				)

			response = saveDialog.showDialog
	
			if response == DialogResult.OK
	
				file = saveDialog.fileName
	
				try
	
					Program.currentImage.save(file)
					Program.saved = true


				catch
	
					MessageBox.show(
						'Unable to save file to:\n "[file]"',
						'Error',
						MessageBoxButtons.OK,
						MessageBoxIcon.Error
						)

		# handler for the save button
		listen __uxSave.click, do(sender, e as EventArgs)

			raise __SavePrompt
			

		# ask the user if they want to save the file
		# returns whether they saved or not
		checkSave = Func<of bool>(do)

			response = MessageBox.show(
				'You have not saved the current image. Do you wish to save?',
				'Save file?',
				MessageBoxButtons.YesNo,
				MessageBoxIcon.Asterisk
				)

			if response == DialogResult.Yes

				raise __SavePrompt
				return true


			return false


		# universal open prompt
		listen __OpenPrompt, do

			if not Program.saved, checkSave()

			openDialog = OpenFileDialog(
				defaultExt='png'
				)

			response = openDialog.showDialog
	
			if response == DialogResult.OK
	
				file = openDialog.fileName
	
				try
	
					Program.sourceImage = Bitmap(file)
					
	
				catch
	
					MessageBox.show(
						'Unable to open file:\n "[file]"',
						'Error',
						MessageBoxButtons.OK,
						MessageBoxIcon.Error
						)


		# handler for the open button
		listen __uxOpen.click, do(sender, e as EventArgs)

			raise __OpenPrompt


		# used in the min/max range verification
		boxMinMax = Func<of number, number>(do(num as number))
			
			min as number
			max as number

			branch __verifiedIndexType

				on 'Luminance' or 'Red' or 'Green' or 'Blue' or 'Alpha' or 'Color Diff', min, max = 0, 255
				on 'Cyan' or 'Magenta' or 'Yellow' or 'K-Value' or 'Value' or 'Saturation', min, max = 0, 1
				on 'Hue', min, max = 0, 360


			if num < min, return min
			else if num > max, return max
			return num


		# handles preview resizing
		resizePreview = Action(do)

			# if the image is smaller than the picture box
			if __uxPreview.width > __uxPreview.image.width and __uxPreview.height > __uxPreview.image.height

				# put the image in the center
				__uxPreview.sizeMode = PictureBoxSizeMode.CenterImage


			# otherwise the image is too large to fit without clipping
			else

				# scale the image to the size of the picture box while retaining aspect ratio
				__uxPreview.sizeMode = PictureBoxSizeMode.Zoom


		# resize the preview when the control resizes
		listen __uxPreview.resize, do(sender, e as EventArgs)

			resizePreview()


		# reset the image in the preview and resize it when a refresh is called
		listen Program.PreviewRefresh, do(img as Bitmap)

			__uxPreview.image = img
			resizePreview()
			__uxPreview.refresh


		# handle the undo button
		listen __uxUndo.click, do(sender, e as EventArgs)

			Program.undo

		
		# handle the redo button
		listen __uxRedo.click, do(sender, e as EventArgs)

			Program.redo


		# verification for the sort angle box
		valid as bool

		validateNumericKeyPress = KeyEventHandler(do(sender, e as KeyEventArgs))
			if not e.shift
				branch e.keyCode
					on Keys.D0 or Keys.D1 or Keys.D2 or Keys.D3 or Keys.D4 or Keys.D5 or Keys.D6 or Keys.D7 or Keys.D8 or Keys.D9 or Keys.Back
						valid = true
					on Keys.OemPeriod
						if '.' not in sender.text, valid = true
						else, valid = false
					else, valid = false
			else, valid = false

		listen __raSortAngle.keyDown, validateNumericKeyPress
		listen __raSortAngle.keyPress, do(sender, e as KeyPressEventArgs)
			if not valid, e.handled = true
		listen __raMinSortRange.keyDown, validateNumericKeyPress
		listen __raMinSortRange.keyPress, do(sender, e as KeyPressEventArgs)
			if not valid, e.handled = true
		listen __raMaxSortRange.keyDown, validateNumericKeyPress
		listen __raMaxSortRange.keyPress, do(sender, e as KeyPressEventArgs)
			if not valid, e.handled = true


			

		listen __raSortAngle.textChanged, do(sender, e as EventArgs)

			num as number

			if __raSortAngle.text == nil or __raSortAngle.text == '', __raSortAngle.text = '0'
			else if __raSortAngle.text.startsWith('.'), __raSortAngle.text = '0'+__raSortAngle.text

			num = try number.parse(__raSortAngle.text to !) catch FormatException get __verifiedSortAngle
			
			if not __raSortAngle.text.endsWith('.') and num <> __verifiedSortAngle

				if num < 0, num = 0
				if num >= 360, num = 0

				__raSortAngle.text = ( __verifiedSortAngle = num ).toString


		# verification for the min range box
		listen __raMinSortRange.textChanged, do(sender, e as EventArgs)

			num as number

			if __raMinSortRange.text == nil or __raMinSortRange.text == '', __raMinSortRange.text = '0'
			else if __raMinSortRange.text.startsWith('.'), __raMinSortRange.text = '0'+__raMinSortRange.text

			num = try number.parse(__raMinSortRange.text to !) catch FormatException get __verifiedMinRange

			if not __raMinSortRange.text.endsWith('.') and num <> __verifiedMinRange

				num = boxMinMax(num)

				if num > __verifiedMaxRange, num = __verifiedMaxRange

				__raMinSortRange.text = (__verifiedMinRange = num).toString


		# verification for the max range box
		listen __raMaxSortRange.textChanged, do(sender, e as EventArgs)

			num as number

			if __raMaxSortRange.text == nil or __raMaxSortRange.text == '', __raMaxSortRange.text = '0'
			else if __raMaxSortRange.text.startsWith('.'), __raMaxSortRange.text = '0'+__raMaxSortRange.text

			num = try number.parse(__raMaxSortRange.text to !) catch FormatException get __verifiedMaxRange

			if not __raMaxSortRange.text.endsWith('.') and num <> __verifiedMaxRange

				num = boxMinMax(num)

				if num < __verifiedMinRange, num = __verifiedMinRange

				__raMaxSortRange.text = (__verifiedMaxRange = num).toString


		# handler for the render / cancel button
		listen __uxRenderOrCancel.click, do(sender, e as EventArgs)

			if __uxRenderOrCancel.text == 'Cancel'

				Program.renderThread.cancelAsync

				__uxRenderOrCancel.text = 'Render'


			else

				branch __verifiedIndexType

					on 'Alpha', indexer = Pixel.Indexers.alpha
					on 'Red', indexer = Pixel.Indexers.red
					on 'Green', indexer = Pixel.Indexers.green
					on 'Blue', indexer = Pixel.Indexers.blue
					on 'Cyan', indexer = Pixel.Indexers.cyan
					on 'Magenta', indexer = Pixel.Indexers.magenta
					on 'Yellow', indexer = Pixel.Indexers.yellow
					on 'K-Value', indexer = Pixel.Indexers.kValue
					on 'Hue', indexer = Pixel.Indexers.hue
					on 'Saturation', indexer = Pixel.Indexers.saturation
					on 'Value', indexer = Pixel.Indexers.value
					on 'Color Diff', indexer = Pixel.Indexers.colorDiff(
						Pixel(
							__verifiedComparisonColorValues[0],
							__verifiedComparisonColorValues[1],
							__verifiedComparisonColorValues[2],
							__verifiedComparisonColorValues[3]
							)
						)
					on 'Luminance', indexer = Pixel.Indexers.luminance


				# array which holds the arguments for the renderer
				args = Object[](4)

				# try to collect arguments into array
				try

					# try-catch to check if the user needs to, or wants to, open an image
					try, args[0] = Program.currentImage to Object
					catch ex as NullReferenceException

						response = MessageBox.show(
							'You have to open an image before starting a render, do you wish to open one now?',
							'Open file?',
							MessageBoxButtons.YesNo,
							MessageBoxIcon.Asterisk
							)

						if response == DialogResult.Yes

							raise __OpenPrompt
							args[0] = Program.currentImage to Object


						else, throw ex


				# the user has not set an image, but has been prompted,
				# so we drop through the rest of the render prep
				catch NullReferenceException

					pass


				# there was a different problem
				catch Exception

					throw Exception('Tell Ourous he messed up the open prompt verify.')


				# try to collect the second arg
				success, try, args[1] = __verifiedSortAngle to Object
				catch Exception

					throw Exception('Tell Ourous he messed up the sort angle passing to the render thread.')


				# try to collect the third arg
				success, try, args[2] = indexer to Object
				catch Exception

					throw Exception('Tell Ourous he messed up the indexer passing to the render thread.')


				# try to collect the fourth arg
				success, try, args[3] = @[Pair<of number>( __verifiedMinRange, __verifiedMaxRange)] to Object
				catch Exception

					throw Exception('Tell Ourous he messed up the range passing to the render thread.')

				# all args collected successfully, so start the render
				success

					Program.renderThread.runWorkerAsync(args)

					# update button text
					__uxRenderOrCancel.text = 'Cancel'


		# use the same delegate to verify all the reference color byte fields
		verifyColorDiffBox = EventHandler(do(sender, e as EventArgs))
			
			if sender inherits TextBox

				num as uint8
	
				try
	
					if sender.text == nil or sender.text == '', num = 0u8
					else, num = uint8.parse(sender.text to !)
	
	
				catch FormatException
	
					num = __verifiedComparisonColorValues[sender.tag to int]
	
	
				catch OverflowException
	
					num = 255u8
	
	
				if num <> __verifiedComparisonColorValues[sender.tag to int] or num.toString <> sender.text
	
					sender.text = (__verifiedComparisonColorValues[sender.tag to int] = num).toString

			__uxLayoutColorDiff.backColor = Color.fromArgb(__verifiedComparisonColorValues[1], __verifiedComparisonColorValues[2], __verifiedComparisonColorValues[3])
			__uxLayoutColorDiff.refresh


		# assign verifier to all the fields
		listen __raColorDiffAlpha.textChanged, verifyColorDiffBox
		listen __raColorDiffRed.textChanged, verifyColorDiffBox
		listen __raColorDiffGreen.textChanged, verifyColorDiffBox
		listen __raColorDiffBlue.textChanged, verifyColorDiffBox

		# check if the index type needs the reference color input to be active
		listen __raIndexType.selectedValueChanged, do(sender, e as EventArgs)

			__uxLayoutColorDiff.enabled = __raIndexType.selectedItem to String == 'Color Diff'


		# update the progress bar when the render moves forwards
		listen Program.renderThread.progressChanged, do(sender, e as ProgressChangedEventArgs)

			__uxRenderProgress.value = e.progressPercentage


		# update the render / cancel button text when the render is done,
		# and clear the progress bar
		listen Program.renderThread.runWorkerCompleted, do(sender, e as RunWorkerCompletedEventArgs)

			__uxRenderOrCancel.text = 'Render'
			__uxRenderProgress.value = 0


		# scale the min / max range values when the min / max of acceptable range input
		# is altered through an index type change
		listen __raIndexType.selectedValueChanged, do(sender, e as EventArgs)

			min1 as number
			min2 as number
			max1 as number
			max2 as number

			branch __raIndexType.selectedItem to String

				on 'Luminance' or 'Red' or 'Green' or 'Blue' or 'Alpha' or 'Color Diff', min2, max2 = 0, 255
				on 'Cyan' or 'Magenta' or 'Yellow' or 'K-Value' or 'Value' or 'Saturation', min2, max2 = 0, 1
				on 'Hue', min2, max2 = 0, 360


			branch __verifiedIndexType

				on 'Luminance' or 'Red' or 'Green' or 'Blue' or 'Alpha' or 'Color Diff', min1, max1 = 0, 255
				on 'Cyan' or 'Magenta' or 'Yellow' or 'K-Value' or 'Value' or 'Saturation', min1, max1 = 0, 1
				on 'Hue', min1, max1 = 0, 360


			__verifiedIndexType = __raIndexType.selectedItem to String

			__verifiedMinRange = (((__verifiedMinRange - min1) / max1) * max2 + min2)
			__verifiedMaxRange = (((__verifiedMaxRange - min1) / max1) * max2 + min2)

			__raMinSortRange.text, __raMaxSortRange.text = __verifiedMinRange.toString('0.#####'), __verifiedMaxRange.toString('0.#####')


		# check if things are happening when the user tries to close the window
		listen .formClosing, do(sender, e as FormClosingEventArgs)

			# check if there is a render happening
			if Program.renderThread.isBusy

				response = MessageBox.show(
					'There is a render in progress, do you want to cancel it and close the application?',
					'Render in progress',
					MessageBoxButtons.YesNo,
					MessageBoxIcon.Asterisk
					)

				# does the user want to keep the render or close the window?
				if response == DialogResult.No, e.cancel = true


			# prompt the user to save if they haven't
			if not Program.saved, checkSave()