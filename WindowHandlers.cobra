use System.Windows.Forms
use System.Text.RegularExpressions
use System.Drawing

class Window is partial

	def __verifyColorDiffBox(sender, e as EventArgs)
		if sender inherits TextBox
			num as uint8
			try
				if sender.text == nil or sender.text == ''
					num = 0u8
				else
					num = uint8.parse(sender.text to !)
			catch FormatException
				num = __verifiedComparisonColorValues[sender.tag to int]
			catch OverflowException
				num = 255u8
			finally
				if num <> __verifiedComparisonColorValues[sender.tag to int] or num.toString <> sender.text
					sender.text = (__verifiedComparisonColorValues[sender.tag to int] = num).toString


	def __verifyRangeMin(sender, e as EventArgs)

		if sender inherits TextBox
			min as number
			max as number
			num as number

			branch __verifiedIndexType
				on 'Luminance' or 'Red' or 'Green' or 'Blue' or 'Alpha' or 'Color Diff', min, max = 0, 255
				on 'Cyan' or 'Magenta' or 'Yellow' or 'K-Value' or 'Value' or 'Saturation', min, max = 0, 1
				on 'Hue', min, max = 0, 360

			if sender.text == nil or sender.text == ''
				num = 0n
			else
				num = try number.parse(sender.text to !) catch FormatException get __verifiedMinRange
				if num < min
					num = min
				if num > max
					num = max
				if num > __verifiedMaxRange
					num = __verifiedMaxRange
			if not Regex(r'^\d+\.$').isMatch(sender.text)
				sender.text = (__verifiedMinRange = num).toString('0.#####')
					
	def __verifyRangeMax(sender, e as EventArgs)
		if sender inherits TextBox
			min as number
			max as number
			num as number

			branch __verifiedIndexType
				on 'Luminance' or 'Red' or 'Green' or 'Blue' or 'Alpha' or 'Color Diff', min, max = 0, 255
				on 'Cyan' or 'Magenta' or 'Yellow' or 'K-Value' or 'Value' or 'Saturation', min, max = 0, 1
				on 'Hue', min, max = 0, 360


			if sender.text == nil or sender.text == ''
				num = 0n
			else
				num = try number.parse(sender.text to !) catch FormatException get __verifiedMaxRange
				if num < min
					num = min
				if num > max
					num = max
				if num < __verifiedMinRange
					num = __verifiedMinRange

			if not Regex(r'^\d+\.$').isMatch(sender.text)
				sender.text = (__verifiedMaxRange = num).toString('0.#####')

	def __verifyIndexType(sender, e as EventArgs)
		# index type is verified intrinsically
		pass

	def __verifyDegValue(sender, e as EventArgs)
		if sender inherits TextBox
			num as number
			if sender.text == nil or sender.text == ''
				num = 0n
			else
				num = try number.parse(sender.text to !) catch FormatException get __verifiedSortAngle
				if num < 0, num = 0
				if num >= 360, num = 0
			if not Regex(r'^\d+\.$').isMatch(sender.text)
				sender.text = ( __verifiedSortAngle = num ).toString('0.#####')

	def __saveFile(sender, e as EventArgs)
		saveDialog = SaveFileDialog(
			defaultExt='png',
			addExtension=true,
			filter='Portable Network Graphics (*.png)|.png|JPEG (*.jpg;*.jpeg)|.jpg|Bitmap Image (*.bmp)|.bmp'
			)

		response = saveDialog.showDialog

		if response == DialogResult.OK

			file = saveDialog.fileName

			try

				Program.currentImage.save(file)


			catch

				MessageBox.show('Unable to save file to:\n "[file]"', 'Error', MessageBoxButtons.OK, MessageBoxIcon.Error)

	def __openFile(sender, e as EventArgs)
		openDialog = OpenFileDialog(defaultExt='png')
		response = openDialog.showDialog

		if response == DialogResult.OK

			file = openDialog.fileName

			try

				Program.sourceImage = Bitmap(file)


			catch

				MessageBox.show('Unable to open file:\n "[file]"', 'Error', MessageBoxButtons.OK, MessageBoxIcon.Error)

	def __previewResize(sender, e as EventArgs)
		if sender inherits PictureBox
			#if the image is smaller than the picture box
			if sender.width > sender.image.width and sender.height > sender.image.height
				#put the image in the center
				sender.sizeMode = PictureBoxSizeMode.CenterImage
			#otherwise the image is too large to fit without clipping
			else
				#scale the image to the size of the picture box while retaining aspect ratio
				sender.sizeMode = PictureBoxSizeMode.Zoom