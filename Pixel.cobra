struct Pixel
	"""
	Represents a 32-bit ARGB pixel
	"""

	get a from __a as uint8
	get r from __r as uint8
	get g from __g as uint8
	get b from __b as uint8

	cue init(a as uint8, r as uint8, g as uint8, b as uint8)
		"""
		Alpha, Red, Green, Blue
		"""

		__a, __r, __g, __b = a, r, g, b


	cue init(r as uint8, g as uint8, b as uint8)
		"""
		(Alpha == 255 is implied), Red, Green, Blue
		"""

		this.init(255, r, g, b)


	sig PixelIndexer(pixel as Pixel) as number

	def toString as String is override

		return '([__a],[__r],[__g],[__b])'


	def toTechString as String

		return 'Pixel[.toString]'


	def toPrintString as String

		return .toString


	class Indexers

		shared

			def red as PixelIndexer
				"""
				Indexer which represents the raw red value of a color in the ARGB format.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					return pixel.r to number


			def green as PixelIndexer
				"""
				Indexer which represents the raw green value of a color in the ARGB format.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					return pixel.g to number


			def blue as PixelIndexer
				"""
				Indexer which represents the raw blue value of a color in the ARGB format.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					return pixel.b to number


			def cyan as PixelIndexer
				"""
				Indexer which represents the cyan value of a color in the CMYK format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# max of {r, g, b}
					denom = if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b))

					# check if denominator is 0 to avoid division problems
					if denom, return 1 - r / denom
					else, return 0n


			def magenta as PixelIndexer
				"""
				Indexer which represents the magenta value of a color in the CMYK format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# max of {r, g, b}
					denom = if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b))

					# check if denominator is 0 to avoid division problems
					if denom, return 1 - g / denom
					else, return 0n


			def yellow as PixelIndexer
				"""
				Indexer which represents the yellow value of a color in the CMYK format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# max of {r, g, b}
					denom = if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b))

					# check if denominator is 0 to avoid division problems
					if denom, return 1 - b / denom
					else, return 0n


			def kValue as PixelIndexer
				"""
				Indexer which represents the key value of a color in the CMYK format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# 1 - max of {r, g, b} / 255
					return 1 - if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b)) / 255n


			def alpha as PixelIndexer
				"""
				Indexer which represents the raw alpha value of a color in the ARGB format.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					return pixel.a to number


			def luminance as PixelIndexer
				"""
				Indexer which represents the perceived luminance of a color.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					# completely arbitrary formula for perceived luminance
					# may be entirely bullshit, but seems to work
					return 0.299n * pixel.r + 0.587n * pixel.g + 0.114n * pixel.b

	
			def saturation as PixelIndexer
				"""
				Indexer which represents the saturation of a color in the HSV format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# max of {r, g, b}
					denom = if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b))

					# check if denominator is 0 to avoid division problems
					if denom, return if(r and b<>b%r and g<>g%r, r, if(g and b<>b%g, g, b)) / denom
					else, return 0n

	
			def hue as PixelIndexer
				"""
				Indexer which represents the hue of a color in the HSV format.
				 Indexes between 0 - 360
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# check if delta is 0
					if r==g==b, return 0n

					#if b <= r >= g
					if r and (r==b or b==b%r) and (r==g or g==g%r)
						return 60 * (((g - b) / (r - if(g and b==b%g, b, g))) % 6) #if(b < g, b, g)

					#if r <= g >= b
					if g and (g==r or r==r%g) and (g==b or b==b%g)
						return 60 * (((b - r) / (g - if(b and r==r%b, r, b))) + 2) #if(r < b, r, b)

					#if g <= b >= r
					if b and (b==g or g==g%b) and (b==r or r==r%b)
						return 60 * (((r - g) / (b - if(r and g==g%r, g, r))) + 4) #if(g < r, g, r)

					throw ArithmeticException('Tell Ourous that he messed up the hue indexer again: [pixel]@HUE')


			def value as PixelIndexer
				"""
				Indexer which represents the value of a color in the HSV format.
				 Indexes between 0 - 1
				"""

				return PixelIndexer(do(pixel as Pixel))

					# unpack pixel
					r, g, b = pixel.r, pixel.g, pixel.b

					# max of {r, g, b} / 255
					return if(r and b==b%r and g==g%r, r, if(g and b==b%g, g, b)) / 255n


			def colorDiff(referenceColor as Pixel) as PixelIndexer
				"""
				Indexer which represents the geometric difference between two pixels.
				 Indexes between 0 - 255
				"""

				return PixelIndexer(do(pixel as Pixel))

					ret = 255 - ((pixel.a - referenceColor.a)**2 + (pixel.r - referenceColor.r)**2 + (pixel.g - referenceColor.g)**2 + (pixel.b - referenceColor.b)**2)**0.5 / 2n

					# avoid NaN
					return if(ret.isNaN, 0n, ret)
