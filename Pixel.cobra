
struct Pixel
	"""
	Represents a 32-bit ARGB pixel
	"""

	get a from __a as uint8
	get r from __r as uint8
	get g from __g as uint8
	get b from __b as uint8

	cue init(a as uint8, r as uint8, g as uint8, b as uint8)
		"""
		Alpha, Red, Green, Blue
		"""

		__a, __r, __g, __b = a, r, g, b


	cue init(r as uint8, g as uint8, b as uint8)
		"""
		(Alpha == 255 is implied), Red, Green, Blue
		"""

		this.init(255, r, g, b)

	cue enumerate as uint8*
		return @[__a, __r, __g, __b]

	sig PixelIndexer(pixel as Pixel) as number

	def toString as String is override
		return '([__a],[__r],[__g],[__b])'

	def toTechString as String
		return 'Pixel[.toString]'

	def toPrintString as String
		return .toString

	class Indexers

		shared

			def red as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					return pixel.r to number


			def green as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					return pixel.g to number


			def blue as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					return pixel.b to number


			def cyan as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					denom = if(b < r > g, r, if(b < g, g, b))
					if denom
						return 1 - r / denom
					else
						return 0n


			def magenta as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					denom = if(b < r > g, r, if(b < g, g, b))
					if denom
						return 1 - g / denom
					else
						return 0n


			def yellow as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					denom = if(b < r > g, r, if(b < g, g, b))
					if denom
						return 1 - b / denom
					else
						return 0n


			def kValue as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					return 1 - if(b < r > g, r, if(b < g, g, b)) / 255n


			def alpha as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					return pixel.a to number


			def luminance as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					return 0.299n*pixel.r + 0.587n*pixel.g + 0.114n*pixel.b

	
			def saturation as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))
					
					r, g, b = pixel.r, pixel.g, pixel.b
					denom = if(b < r > g, r, if(b < g, g, b))
					if denom
						return if(b > r < g, r, if(b > g, g, b)) / denom
					else
						return 0n

	
			def hue as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					if r == g == b, return 0n
					if b <= r >= g, return 60 * (((g - b) / (r - if(b < g, b, g))) % 6)
					if r <= g >= b, return 60 * (((b - r) / (g - if(r < b, r, b))) + 2)
					if g <= b >= r, return 60 * (((r - g) / (b - if(g < r, g, r))) + 6)
					throw ArithmeticException('Tell Ourous that he messed up the hue indexer again: [pixel]@HUE')


			def value as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					r, g, b = pixel.r, pixel.g, pixel.b
					return if(b < r > g, r, if(b < g, g, b)) / 255n


			def colorDiff(referenceColor as Pixel) as PixelIndexer

				return PixelIndexer(do(pixel as Pixel))

					ret = 255 - ((pixel.a - referenceColor.a)**2 + (pixel.r - referenceColor.r)**2 + (pixel.g - referenceColor.g)**2 + (pixel.b - referenceColor.b)**2)**0.5 / 2n
					return if(ret.isNaN, 0n, ret)
